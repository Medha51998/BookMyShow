<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="interface-suite.xml" />
	<munit:test name="put:\movies:application\json:book_my_show-config-test" doc:id="3029547c-be62-4264-947b-5daa11b57557" >
		<munit:behavior >
			<munit:set-event doc:name="Set Input" doc:id="724d8eab-3f71-4a1f-8cdb-f640d3e8b17e" >
				<munit:payload value="#[output application/json --- readUrl('classpath://putmoviesapplicationjsonbookmyshowconfigtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://putmoviesapplicationjsonbookmyshowconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://putmoviesapplicationjsonbookmyshowconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to put:\movies:application\json:book_my_show-config" doc:id="ade6e703-6b55-4329-915e-aecac130de2b" name="put:\movies:application\json:book_my_show-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="3fabcaec-ee12-49fb-97e4-4426041733be" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import putmoviesapplicationjsonbookmyshowconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\movies:book_my_show-config-test" doc:id="c18c8882-d53d-49c5-b5d6-6e74ba1f13fa" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="5b50dad0-ac0c-456c-aef2-b2afa17dc4b3" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="80a1f3a6-e5e7-497b-ba98-a4d9523837ae" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://getmoviesbookmyshowconfigtest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://getmoviesbookmyshowconfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getmoviesbookmyshowconfigtest\mock_variable_.dwl')]" />
						<munit-tools:variable key="city" value="#[output application/java --- readUrl('classpath://getmoviesbookmyshowconfigtest\mock_variable_1.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="language" value="#[output application/java --- readUrl('classpath://getmoviesbookmyshowconfigtest\mock_variable_2.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="e9b9da4b-44ad-4b83-8900-4e49f2468e27" >
				<munit:payload value="#[readUrl('classpath://getmoviesbookmyshowconfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getmoviesbookmyshowconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getmoviesbookmyshowconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\movies:book_my_show-config" doc:id="4b7407e0-00f4-40b7-a8ec-0190fe487b06" name="get:\movies:book_my_show-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="80767ec7-8926-44cd-9b64-57766378643b" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getmoviesbookmyshowconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="post:\order:application\json:book_my_show-config-test" doc:id="fb1ca2e2-8b93-4007-9a80-2e6a8621b6f3" >
		<munit:behavior >
			<munit:set-event doc:name="Set Input" doc:id="11593749-74f8-47a9-a42e-10e3a3eda9bd" >
				<munit:payload value="#[output application/json --- readUrl('classpath://postorderapplicationjsonbookmyshowconfigtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://postorderapplicationjsonbookmyshowconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://postorderapplicationjsonbookmyshowconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to post:\order:application\json:book_my_show-config" doc:id="fac66b70-3514-4385-b8a7-e9d346c76193" name="post:\order:application\json:book_my_show-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="d2b3e873-0f6c-427c-acae-880f6c29ad57" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import postorderapplicationjsonbookmyshowconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="patch:\order:application\json:book_my_show-config-test" doc:id="9d254511-75cc-4488-86e1-e30520447220" >
		<munit:behavior >
			<munit:set-event doc:name="Set Input" doc:id="14e42a4e-93f1-4b3b-94cf-792d26693c8b" >
				<munit:payload value="#[output application/json --- readUrl('classpath://patchorderapplicationjsonbookmyshowconfigtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://patchorderapplicationjsonbookmyshowconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://patchorderapplicationjsonbookmyshowconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to patch:\order:application\json:book_my_show-config" doc:id="b36450bc-f358-40f2-bd5d-ea723a1c909c" name="patch:\order:application\json:book_my_show-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="f6037c79-89f4-4373-9dff-54c7a573cef6" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import patchorderapplicationjsonbookmyshowconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="delete:\movies:book_my_show-config-test" doc:id="d0c69d81-954f-4d17-ac3e-bc8aaefd4e9f" >
		<munit:behavior >
			<munit:set-event doc:name="Set Input" doc:id="f62c67ba-cb38-4b22-b831-e7c0dcc7093f" >
				<munit:payload value="#[output application/json --- readUrl('classpath://deletemoviesbookmyshowconfigtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://deletemoviesbookmyshowconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://deletemoviesbookmyshowconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to delete:\movies:book_my_show-config" doc:id="8dfee284-8de6-426f-aaa8-379a576b89c9" name="delete:\movies:book_my_show-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="5f918da9-c369-4c5b-9540-b0269da52b2a" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import deletemoviesbookmyshowconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
